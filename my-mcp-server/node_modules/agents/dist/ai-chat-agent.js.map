{"version":3,"sources":["../src/ai-chat-agent.ts"],"sourcesContent":["import { Agent, type AgentContext, type Connection, type WSMessage } from \"./\";\nimport type {\n  Message as ChatMessage,\n  StreamTextOnFinishCallback,\n  ToolSet,\n} from \"ai\";\nimport { appendResponseMessages } from \"ai\";\nimport type { OutgoingMessage, IncomingMessage } from \"./ai-types\";\n\nconst decoder = new TextDecoder();\n\n/**\n * Extension of Agent with built-in chat capabilities\n * @template Env Environment type containing bindings\n */\nexport class AIChatAgent<Env = unknown, State = unknown> extends Agent<\n  Env,\n  State\n> {\n  /**\n   * Map of message `id`s to `AbortController`s\n   * useful to propagate request cancellation signals for any external calls made by the agent\n   */\n  #chatMessageAbortControllers: Map<string, AbortController>;\n  /** Array of chat messages for the current conversation */\n  messages: ChatMessage[];\n  constructor(ctx: AgentContext, env: Env) {\n    super(ctx, env);\n    this.sql`create table if not exists cf_ai_chat_agent_messages (\n      id text primary key,\n      message text not null,\n      created_at datetime default current_timestamp\n    )`;\n    this.messages = (\n      this.sql`select * from cf_ai_chat_agent_messages` || []\n    ).map((row) => {\n      return JSON.parse(row.message as string);\n    });\n\n    this.#chatMessageAbortControllers = new Map();\n  }\n\n  #broadcastChatMessage(message: OutgoingMessage, exclude?: string[]) {\n    this.broadcast(JSON.stringify(message), exclude);\n  }\n\n  override async onMessage(connection: Connection, message: WSMessage) {\n    if (typeof message === \"string\") {\n      let data: IncomingMessage;\n      try {\n        data = JSON.parse(message) as IncomingMessage;\n      } catch (error) {\n        // silently ignore invalid messages for now\n        // TODO: log errors with log levels\n        return;\n      }\n      if (\n        data.type === \"cf_agent_use_chat_request\" &&\n        data.init.method === \"POST\"\n      ) {\n        const {\n          method,\n          keepalive,\n          headers,\n          body, // we're reading this\n          redirect,\n          integrity,\n          credentials,\n          mode,\n          referrer,\n          referrerPolicy,\n          window,\n          // dispatcher,\n          // duplex\n        } = data.init;\n        const { messages } = JSON.parse(body as string);\n        this.#broadcastChatMessage(\n          {\n            type: \"cf_agent_chat_messages\",\n            messages,\n          },\n          [connection.id]\n        );\n        await this.persistMessages(messages, [connection.id]);\n\n        const chatMessageId = data.id;\n        const abortSignal = this.#getAbortSignal(chatMessageId);\n\n        return this.#tryCatch(async () => {\n          const response = await this.onChatMessage(\n            async ({ response }) => {\n              const finalMessages = appendResponseMessages({\n                messages,\n                responseMessages: response.messages,\n              });\n\n              await this.persistMessages(finalMessages, [connection.id]);\n              this.#removeAbortController(chatMessageId);\n            },\n            abortSignal ? { abortSignal } : undefined\n          );\n\n          if (response) {\n            await this.#reply(data.id, response);\n          }\n        });\n      }\n      if (data.type === \"cf_agent_chat_clear\") {\n        this.#destroyAbortControllers();\n        this.sql`delete from cf_ai_chat_agent_messages`;\n        this.messages = [];\n        this.#broadcastChatMessage(\n          {\n            type: \"cf_agent_chat_clear\",\n          },\n          [connection.id]\n        );\n      } else if (data.type === \"cf_agent_chat_messages\") {\n        // replace the messages with the new ones\n        await this.persistMessages(data.messages, [connection.id]);\n      } else if (data.type === \"cf_agent_chat_request_cancel\") {\n        // propagate an abort signal for the associated request\n        this.#cancelChatRequest(data.id);\n      }\n    }\n  }\n\n  override async onRequest(request: Request): Promise<Response> {\n    return this.#tryCatch(() => {\n      const url = new URL(request.url);\n      if (url.pathname.endsWith(\"/get-messages\")) {\n        const messages = (\n          this.sql`select * from cf_ai_chat_agent_messages` || []\n        ).map((row) => {\n          return JSON.parse(row.message as string);\n        });\n        return Response.json(messages);\n      }\n      return super.onRequest(request);\n    });\n  }\n\n  async #tryCatch<T>(fn: () => T | Promise<T>) {\n    try {\n      return await fn();\n    } catch (e) {\n      throw this.onError(e);\n    }\n  }\n\n  /**\n   * Handle incoming chat messages and generate a response\n   * @param onFinish Callback to be called when the response is finished\n   * @param options.signal A signal to pass to any child requests which can be used to cancel them\n   * @returns Response to send to the client or undefined\n   */\n  async onChatMessage(\n    onFinish: StreamTextOnFinishCallback<ToolSet>,\n    options?: { abortSignal: AbortSignal | undefined }\n  ): Promise<Response | undefined> {\n    throw new Error(\n      \"recieved a chat message, override onChatMessage and return a Response to send to the client\"\n    );\n  }\n\n  /**\n   * Save messages on the server side and trigger AI response\n   * @param messages Chat messages to save\n   */\n  async saveMessages(messages: ChatMessage[]) {\n    await this.persistMessages(messages);\n    const response = await this.onChatMessage(async ({ response }) => {\n      const finalMessages = appendResponseMessages({\n        messages,\n        responseMessages: response.messages,\n      });\n\n      await this.persistMessages(finalMessages, []);\n    });\n    if (response) {\n      // we're just going to drain the body\n      // @ts-ignore TODO: fix this type error\n      for await (const chunk of response.body!) {\n        decoder.decode(chunk);\n      }\n      response.body?.cancel();\n    }\n  }\n\n  async persistMessages(\n    messages: ChatMessage[],\n    excludeBroadcastIds: string[] = []\n  ) {\n    this.sql`delete from cf_ai_chat_agent_messages`;\n    for (const message of messages) {\n      this.sql`insert into cf_ai_chat_agent_messages (id, message) values (${\n        message.id\n      },${JSON.stringify(message)})`;\n    }\n    this.messages = messages;\n    this.#broadcastChatMessage(\n      {\n        type: \"cf_agent_chat_messages\",\n        messages: messages,\n      },\n      excludeBroadcastIds\n    );\n  }\n\n  async #reply(id: string, response: Response) {\n    // now take chunks out from dataStreamResponse and send them to the client\n    return this.#tryCatch(async () => {\n      // @ts-expect-error TODO: fix this type error\n      for await (const chunk of response.body!) {\n        const body = decoder.decode(chunk);\n\n        this.#broadcastChatMessage({\n          id,\n          type: \"cf_agent_use_chat_response\",\n          body,\n          done: false,\n        });\n      }\n\n      this.#broadcastChatMessage({\n        id,\n        type: \"cf_agent_use_chat_response\",\n        body: \"\",\n        done: true,\n      });\n    });\n  }\n\n  /**\n   * For the given message id, look up its associated AbortController\n   * If the AbortController does not exist, create and store one in memory\n   *\n   * returns the AbortSignal associated with the AbortController\n   */\n  #getAbortSignal(id: string): AbortSignal | undefined {\n    // Defensive check, since we're coercing message types at the moment\n    if (typeof id !== \"string\") {\n      return undefined;\n    }\n\n    if (!this.#chatMessageAbortControllers.has(id)) {\n      this.#chatMessageAbortControllers.set(id, new AbortController());\n    }\n\n    return this.#chatMessageAbortControllers.get(id)?.signal;\n  }\n\n  /**\n   * Remove an abort controller from the cache of pending message responses\n   */\n  #removeAbortController(id: string) {\n    this.#chatMessageAbortControllers.delete(id);\n  }\n\n  /**\n   * Propagate an abort signal for any requests associated with the given message id\n   */\n  #cancelChatRequest(id: string) {\n    if (this.#chatMessageAbortControllers.has(id)) {\n      const abortController = this.#chatMessageAbortControllers.get(id);\n      abortController?.abort();\n    }\n  }\n\n  /**\n   * Abort all pending requests and clear the cache of AbortControllers\n   */\n  #destroyAbortControllers() {\n    for (const controller of this.#chatMessageAbortControllers.values()) {\n      controller?.abort();\n    }\n    this.#chatMessageAbortControllers.clear();\n  }\n\n  /**\n   * When the DO is destroyed, cancel all pending requests\n   */\n  async destroy() {\n    this.#destroyAbortControllers();\n    await super.destroy();\n  }\n}\n"],"mappings":"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","names":["response"]}