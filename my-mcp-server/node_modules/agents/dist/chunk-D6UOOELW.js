// src/mcp/do-oauth-client-provider.ts
var DurableObjectOAuthClientProvider = class {
  constructor(storage, clientName, baseRedirectUrl) {
    this.storage = storage;
    this.clientName = clientName;
    this.baseRedirectUrl = baseRedirectUrl;
  }
  get clientMetadata() {
    return {
      redirect_uris: [this.redirectUrl],
      token_endpoint_auth_method: "none",
      grant_types: ["authorization_code", "refresh_token"],
      response_types: ["code"],
      client_name: this.clientName,
      client_uri: "example.com"
    };
  }
  get redirectUrl() {
    return `${this.baseRedirectUrl}/${this.serverId}`;
  }
  get clientId() {
    if (!this.clientId_) {
      throw new Error("Trying to access clientId before it was set");
    }
    return this.clientId_;
  }
  set clientId(clientId_) {
    this.clientId_ = clientId_;
  }
  get serverId() {
    if (!this.serverId_) {
      throw new Error("Trying to access serverId before it was set");
    }
    return this.serverId_;
  }
  set serverId(serverId_) {
    this.serverId_ = serverId_;
  }
  keyPrefix(clientId) {
    return `/${this.clientName}/${this.serverId}/${clientId}`;
  }
  clientInfoKey(clientId) {
    return `${this.keyPrefix(clientId)}/client_info/`;
  }
  async clientInformation() {
    if (!this.clientId_) {
      return void 0;
    }
    return await this.storage.get(
      this.clientInfoKey(this.clientId)
    ) ?? void 0;
  }
  async saveClientInformation(clientInformation) {
    await this.storage.put(
      this.clientInfoKey(clientInformation.client_id),
      clientInformation
    );
    this.clientId = clientInformation.client_id;
  }
  tokenKey(clientId) {
    return `${this.keyPrefix(clientId)}/token`;
  }
  async tokens() {
    if (!this.clientId_) {
      return void 0;
    }
    return await this.storage.get(this.tokenKey(this.clientId)) ?? void 0;
  }
  async saveTokens(tokens) {
    await this.storage.put(this.tokenKey(this.clientId), tokens);
  }
  get authUrl() {
    return this.authUrl_;
  }
  /**
   * Because this operates on the server side (but we need browser auth), we send this url back to the user
   * and require user interact to initiate the redirect flow
   */
  async redirectToAuthorization(authUrl) {
    const client_id = authUrl.searchParams.get("client_id");
    if (client_id) {
      authUrl.searchParams.append("state", client_id);
    }
    this.authUrl_ = authUrl.toString();
  }
  codeVerifierKey(clientId) {
    return `${this.keyPrefix(clientId)}/code_verifier`;
  }
  async saveCodeVerifier(verifier) {
    await this.storage.put(this.codeVerifierKey(this.clientId), verifier);
  }
  async codeVerifier() {
    const codeVerifier = await this.storage.get(
      this.codeVerifierKey(this.clientId)
    );
    if (!codeVerifier) {
      throw new Error("No code verifier found");
    }
    return codeVerifier;
  }
};

export {
  DurableObjectOAuthClientProvider
};
//# sourceMappingURL=chunk-D6UOOELW.js.map