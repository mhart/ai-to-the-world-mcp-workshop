{"version":3,"sources":["../src/schedule.ts"],"sourcesContent":["import { z } from \"zod\";\n\nexport type Schedule = z.infer<typeof unstable_scheduleSchema>;\n\nexport function unstable_getSchedulePrompt(event: { date: Date }) {\n  return `\n[Schedule Parser Component]\n\nCurrent time: ${event.date.toUTCString()}\n\nThis component parses natural language scheduling requests into a structured format. It extracts:\n1. A clean task description (without timing information)\n2. Scheduling details in one of these formats:\n   - scheduled: Specific date/time events\n   - delayed: Relative time delays (in seconds)\n   - cron: Recurring patterns\n   - no-schedule: Tasks without timing\n\nRules:\n- Task descriptions should be clean and focused on the action\n- Use numbers (0-6) for days in cron patterns (0=Sunday)\n- For recurring tasks, use standard cron syntax\n- For relative times, convert to seconds\n- For specific dates, use the current time as reference\n\nExample outputs:\n{\n  \"description\": \"meeting with team\",\n  \"when\": {\n    \"type\": \"scheduled\",\n    \"date\": \"tomorrow at 14:00\"\n  }\n}\n\n{\n  \"description\": \"backup database\",\n  \"when\": {\n    \"type\": \"cron\",\n    \"cron\": \"0 0 * * *\"\n  }\n}\n\n{\n  \"description\": \"send report\",\n  \"when\": {\n    \"type\": \"delayed\",\n    \"delayInSeconds\": 1800\n  }\n}\n\n[End Schedule Parser Component]\n`;\n}\n\nexport const unstable_scheduleSchema = z.object({\n  description: z.string().describe(\"A description of the task\"),\n  when: z.object({\n    type: z\n      .enum([\"scheduled\", \"delayed\", \"cron\", \"no-schedule\"])\n      .describe(\"The type of scheduling details\"),\n    date: z.coerce\n      .date()\n      .optional()\n      .describe(\n        \"execute task at the specified date and time (only use if the type is scheduled)\"\n      ),\n    delayInSeconds: z\n      .number()\n      .optional()\n      .describe(\n        \"execute task after a delay in seconds (only use if the type is delayed)\"\n      ),\n    cron: z\n      .string()\n      .optional()\n      .describe(\n        \"execute task on a recurring interval specified as cron syntax (only use if the type is cron)\"\n      ),\n  }),\n});\n"],"mappings":";;;AAAA,SAAS,SAAS;AAIX,SAAS,2BAA2B,OAAuB;AAChE,SAAO;AAAA;AAAA;AAAA,gBAGO,MAAM,KAAK,YAAY,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA4CxC;AAEO,IAAM,0BAA0B,EAAE,OAAO;AAAA,EAC9C,aAAa,EAAE,OAAO,EAAE,SAAS,2BAA2B;AAAA,EAC5D,MAAM,EAAE,OAAO;AAAA,IACb,MAAM,EACH,KAAK,CAAC,aAAa,WAAW,QAAQ,aAAa,CAAC,EACpD,SAAS,gCAAgC;AAAA,IAC5C,MAAM,EAAE,OACL,KAAK,EACL,SAAS,EACT;AAAA,MACC;AAAA,IACF;AAAA,IACF,gBAAgB,EACb,OAAO,EACP,SAAS,EACT;AAAA,MACC;AAAA,IACF;AAAA,IACF,MAAM,EACH,OAAO,EACP,SAAS,EACT;AAAA,MACC;AAAA,IACF;AAAA,EACJ,CAAC;AACH,CAAC;","names":[]}